// "–¢–µ—Å—Ç GetUTFLength"

package main

import (
	"errors"
	"testing"
)

type Test struct {
	input          []byte
	expectedLength int
	expectedError  error
}

var tests = []Test{
	{[]byte("Hello, World!"), 13, nil},            // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
	{[]byte("„Åì„Çì„Å´„Å°„ÅØ"), 5, nil},                     // –Ø–ø–æ–Ω—Å–∫–∏–π —Ç–µ–∫—Å—Ç
	{[]byte("üòÄ"), 1, nil},                         // –≠–º–æ–¥–∑–∏
	{[]byte{0xff, 0xff, 0xff}, 0, ErrInvalidUTF8}, // –ù–µ–≤–µ—Ä–Ω–∞—è UTF-8
	{[]byte("Hello, ‰∏ñÁïå"), 9, nil},                 // –ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤
	{[]byte{0xE2, 0x82, 0xAC}, 1, nil},            // –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UTF-8 (–µ–≤—Ä–æ)
	{[]byte(""), 0, nil},                          // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
	{[]byte{0xC3, 0x28}, 0, ErrInvalidUTF8},       // –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
}

func TestGetUTFLength(t *testing.T) {
	for _, test := range tests {
		length, err := GetUTFLength(test.input)
		if length != test.expectedLength || !errors.Is(err, test.expectedError) {
			t.Fatalf(`GetUTFLength(%q)=(%d, %v); expected (%d, %v)`, test.input, length, err, test.expectedLength, test.expectedError)
		}
	}
}
